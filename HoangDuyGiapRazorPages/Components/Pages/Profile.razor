@page "/Profile/{Id:int}"
@using FUNewsManagement_BOs
@using FUNewsManagement_Repos
@using static FUNewsManagement_DAOs.NewsArticleDAO
@inject ISystemAccountRepo AccountRepo
@inject INewsArticleRepo NewsArticleRepo
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="container mt-4">
    @if (account == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Profile Information Card -->
            <div class="col-md-4 mb-4">
                <div class="card">
                    <div class="card-body">
                        <div class="text-center mb-3">
                            <i class="fas fa-user-circle fa-5x text-primary"></i>
                        </div>
                        <h3 class="card-title text-center">@account.AccountName</h3>
                        <div class="mt-3">
                            <p><strong>Email:</strong> @account.AccountEmail</p>
                            <p><strong>Role:</strong> @GetRoleName(account.AccountRole)</p>
                        </div>
                        <div class="text-center mt-3">
                            <button class="btn btn-outline-primary" @onclick="@(() => NavigationManager.NavigateTo("/NewsArticlePage/Index"))">
                                Back to News
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- News Articles List -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title mb-4">My Articles (@userArticles.Count)</h4>
                        
                        @if (!userArticles.Any())
                        {
                            <div class="text-center text-muted">
                                <p>No articles published yet.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var article in userArticles)
                            {
                                <div class="article-card mb-3 p-3 border rounded">
                                    <h5 class="text-primary">@article.NewsTitle</h5>
                                    <p class="text-muted mb-2">
                                        <small>
                                            <i class="fas fa-calendar-alt"></i> @article.CreatedDate?.ToString("MMM dd, yyyy")
                                            <span class="mx-2">|</span>
                                            <i class="fas fa-folder"></i> @article.CategoryName
                                        </small>
                                    </p>
                                    <p class="mb-2">@article.Headline</p>
                                    
                                    @if (article.Tags != null && article.Tags.Any())
                                    {
                                        <div class="mb-2">
                                            @foreach (var tag in article.Tags)
                                            {
                                                <span class="badge bg-info text-dark me-1">@tag</span>
                                            }
                                        </div>
                                    }
                                    
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span class="badge @(article.NewsStatus == true ? "bg-success" : "bg-secondary")">
                                            @(article.NewsStatus == true ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private SystemAccount? account;
    private List<NewsArticleDto> userArticles = new();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verify user authentication
            var storedId = await LocalStorage.GetItemAsync<string>("id");
            if (string.IsNullOrEmpty(storedId) || !int.TryParse(storedId, out int userId) || userId != Id)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load user data
            account = await AccountRepo.GetAccountByID(Id);
            if (account == null)
            {
                errorMessage = "Account not found";
                return;
            }

            // Load user's articles
            userArticles = await NewsArticleRepo.GetNewsArticlesByAccount((short)Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading profile: {ex.Message}";
        }
    }

    private string GetRoleName(int? roleId)
    {
        return roleId switch
        {
            1 => "Staff",
            2 => "Lecturer",
            3 => "Admin",
            _ => "Unknown Role"
        };
    }
} 