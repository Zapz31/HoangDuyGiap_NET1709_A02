@page "/CategoryPage/Delete/{Id}"
@using FUNewsManagement_BOs
@using FUNewsManagement_Repos
@inject ICategoryRepo CategoryRepo
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container mt-4">
    <h1>Delete Category</h1>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

    @if (category == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <h3>Are you sure you want to delete this?</h3>
        </div>

        <div class="card">
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-2">Category Name</dt>
                    <dd class="col-sm-10">@category.CategoryName</dd>

                    <dt class="col-sm-2">Description</dt>
                    <dd class="col-sm-10">@category.CategoryDesciption</dd>

                    <dt class="col-sm-2">Status</dt>
                    <dd class="col-sm-10">
                        <span class="badge @(category.IsActive == true ? "bg-success" : "bg-secondary")">
                            @(category.IsActive == true ? "Active" : "Inactive")
                        </span>
                    </dd>

                    <dt class="col-sm-2">Parent Category</dt>
                    <dd class="col-sm-10">@(category.ParentCategory?.CategoryName ?? "-")</dd>
                </dl>

                <div class="mt-4">
                    <button class="btn btn-danger me-2" @onclick="DeleteCategory">Delete</button>
                    <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/CategoryPage/Index"))">
                        Back to List
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = default!;

    private Category? category;
    private string message = string.Empty;
    private int roleId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verify admin access
            var storedRoleId = await LocalStorage.GetItemAsync<string>("RoleId");
            if (!int.TryParse(storedRoleId, out roleId) || roleId != 1)
            {
                NavigationManager.NavigateTo("/NewsArticlePage/Index");
                return;
            }

            // Load the category
            category = await CategoryRepo.getCategoryById(short.Parse(Id));
            if (category == null)
            {
                message = "Category not found";
                return;
            }
            
        }
        catch (Exception ex)
        {
            message = $"Error loading category: {ex.Message}";
        }
    }

    private async Task DeleteCategory()
    {
        try
        {
            await CategoryRepo.DeleteCategory(short.Parse(Id));
            message = "Delete Successful";
            NavigationManager.NavigateTo("/CategoryPage/Index");
        }
        catch (Exception ex)
        {
            message = $"Error deleting category: {ex.Message}";
        }
    }
} 